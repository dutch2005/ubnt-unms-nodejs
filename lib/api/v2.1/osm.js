'use strict';

const joi = require('joi');
const { values } = require('ramda');

const { StatusEnum, SiteTypeEnum, DeviceTypeEnum, DeviceCategoryEnum, TemperatureTypeEnum } = require('../../enums');

const ErrorSchema = joi.object({
  statusCode: joi.number().min(400).max(599).required(),
  error: joi.string().required(),
  message: joi.string().optional(),
}).label('Error');

const StatusSchema = joi.object({
  result: joi.bool().required(),
  message: joi.string().required(),
}).label('Status');

const AuthHeaderSchema = joi.object({
  'x-auth-token': joi.string().required().label('User authorization token'),
}).unknown();

const PaginationSchema = joi.object({
  count: joi.number().required().description('Number of items per page'),
  total: joi.number().required().description('Total number of items'),
  page: joi.number().required().description('Ordinal number of page'),
  pages: joi.number().required().description('Total number of pages'),
});

const SiteIdentificationSchema = joi.object({
  id: joi.string().guid().required(),
  status: joi.string().valid(StatusEnum.Active, StatusEnum.Disconnected, StatusEnum.Inactive).required(),
  name: joi.string().required(),
  type: joi.string().valid(...values(SiteTypeEnum)).required(),
  parent: joi.object().allow(null),
});

const DeviceIdentificationSchema = joi.object({
  id: joi.string().required().description('Technical ID only for UNMS'),
  timestamp: joi.number().required(),
  firmwareVersion: joi.string().required(),
  model: joi.string().required(),
  name: joi.string().required(),
  mac: joi.string().required().description('Available only for clients (ONU)'),
  serialNumber: joi.string().required().description('Available only for clients (ONU)'),
  type: joi.string().valid(...values(DeviceTypeEnum)).required(),
  category: joi.string().valid(...values(DeviceCategoryEnum)).required(),
  site: SiteIdentificationSchema.allow(null),
  authorized: joi.boolean().required().description('Device is added to UNMS'),
});

const DeviceOverviewSchema = joi.object({
  status: joi.string().valid(...values(StatusEnum)).required()
    .description('Read-only value generated by NMS - it is not part of GET_STATUS response'),
  uptime: joi.number().required().description('Uptime, in seconds'),
  lastSeen: joi.number().required().description('Last seen timestamp'),
  cpu: joi.number().required().description('Current cpu load'),
  ram: joi.number().required().description('Current memory usage'),
  signal: joi.number().allow(null).description('Nullable prop; current signal level (only for airmax devices), in dBm'),
  location: joi.boolean().required().description('True if device is in location mode'),
  canUpgrade: joi.boolean().required().description('rue if device can be upgraded'),
  voltage: joi.number().required().description('System input voltage, in V'),
  temps: joi.array().items(
    joi.object({
      value: joi.number().required().description('Temperature, in degree Celsius'),
      type: joi.string().valid(...values(TemperatureTypeEnum)).required()
        .description('Temperature senzor name -  Board 1, Board 2, Board (PHY), cpu, CPU, PHY, Board (CPU) etc.'),
    })
  ),
  distance: joi.number().allow(null).description('Nullable property, in meters'),
  transmitPower: joi.number().allow(null).description('Nullable property, in dBm'),
  receivePower: joi.number().allow(null).description('Nullable property, in dBm'),
  biasCurrent: joi.number().allow(null).description('Nullable property, in milli Ampers'),
  rxRate: joi.number().allow(null).description('Nullable property, in bps'),
  rxBytes: joi.number().allow(null).description('Nullable property, in Bytes'),
  txRate: joi.number().allow(null).description('Nullable property, in bps'),
  txBytes: joi.number().allow(null).description('Nullable property, in Bytes'),
  txDropped: joi.number().allow(null).description('Nullable property'),
  txErrors: joi.number().allow(null).description('Nullable property'),
  rxDropped: joi.number().allow(null).description('Nullable property'),
  rxErrors: joi.number().allow(null).description('Nullable property'),
});

const DeviceFirmwareSchema = joi.object({
  current: joi.string().required().description('Current firmware version'),
  latest: joi.string().required().description('Latest known firmware version'),
  semver: joi.object({
    major: joi.number().required(),
    minor: joi.number().required(),
    patch: joi.number().required(),
    prerelease: joi.array().items(joi.string()),
  }).required(),

});

const DeviceSchema = joi.object({
  deviceIdentification: DeviceIdentificationSchema,
  deviceOverview: DeviceOverviewSchema,
  deviceFirmware: DeviceFirmwareSchema,
});

module.exports = {
  ErrorSchema,
  StatusSchema,
  AuthHeaderSchema,
  PaginationSchema,
  SiteIdentificationSchema,
  DeviceSchema,
};
